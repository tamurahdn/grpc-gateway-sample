name: Deploy flow for Amazon ECS

on:
  pull_request:
    branches:
      - main
    types: [closed]

env:
  AWS_REGION: ap-northeast-1
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Extract version info
        id: extracted-version
        run: echo info=${{ github.head_ref }} | sed s/=.*\\//=/ >> $GITHUB_OUTPUT

      - name: demo-grpc-server push to ECR
        id: build-image-demo-grpc-server
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build --no-cache -t demo-grpc-server -f greeter_server/Dockerfile --build-arg DEMO_VERSION=${{ steps.extracted-version.outputs.info }} .
          docker tag demo-grpc-server:latest $ECR_REGISTRY/demo-grpc-server:latest
          docker push $ECR_REGISTRY/demo-grpc-server:latest

      - name: demo-grpc-gateway push to ECR
        id: build-image-demo-grpc-gateway
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build --no-cache -t demo-grpc-gateway -f greeter_gateway/Dockerfile .
          docker tag demo-grpc-gateway:latest $ECR_REGISTRY/demo-grpc-gateway:latest
          docker push $ECR_REGISTRY/demo-grpc-gateway:latest

      - name: Deploy to ECS
        run: |
          aws ecs update-service --service demo-grpc-server-service --cluster demo-cluster --force-new-deployment
          aws ecs update-service --service demo-grpc-gateway-service --cluster demo-cluster --force-new-deployment

      - name: Success
        uses: rtCamp/action-slack-notify@v2.0.2
        if: success()
        env:
          SLACK_TITLE: Deploy flow / Success
          SLACK_COLOR: good
          SLACK_MESSAGE: Message for Success

      - name: Failure
        uses: rtCamp/action-slack-notify@v2.0.2
        if: failure()
        env:
          SLACK_TITLE: Deploy flow / Failure
          SLACK_COLOR: danger
          SLACK_MESSAGE: Message for Failure

      - name: Cancel
        uses: rtCamp/action-slack-notify@v2.0.2
        if: cancelled()
        env:
          SLACK_TITLE: Deploy flow / Cancel
          SLACK_COLOR: danger
          SLACK_MESSAGE: Message for Cancel