// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1-devel
// 	protoc        v3.21.9
// source: proto/health.proto

package pb_health

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DemoHealthCheckResponse_ServingStatus int32

const (
	DemoHealthCheckResponse_UNKNOWN         DemoHealthCheckResponse_ServingStatus = 0
	DemoHealthCheckResponse_SERVING         DemoHealthCheckResponse_ServingStatus = 1
	DemoHealthCheckResponse_NOT_SERVING     DemoHealthCheckResponse_ServingStatus = 2
	DemoHealthCheckResponse_SERVICE_UNKNOWN DemoHealthCheckResponse_ServingStatus = 3 // Used only by the Watch method.
)

// Enum value maps for DemoHealthCheckResponse_ServingStatus.
var (
	DemoHealthCheckResponse_ServingStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "SERVING",
		2: "NOT_SERVING",
		3: "SERVICE_UNKNOWN",
	}
	DemoHealthCheckResponse_ServingStatus_value = map[string]int32{
		"UNKNOWN":         0,
		"SERVING":         1,
		"NOT_SERVING":     2,
		"SERVICE_UNKNOWN": 3,
	}
)

func (x DemoHealthCheckResponse_ServingStatus) Enum() *DemoHealthCheckResponse_ServingStatus {
	p := new(DemoHealthCheckResponse_ServingStatus)
	*p = x
	return p
}

func (x DemoHealthCheckResponse_ServingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DemoHealthCheckResponse_ServingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_health_proto_enumTypes[0].Descriptor()
}

func (DemoHealthCheckResponse_ServingStatus) Type() protoreflect.EnumType {
	return &file_proto_health_proto_enumTypes[0]
}

func (x DemoHealthCheckResponse_ServingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DemoHealthCheckResponse_ServingStatus.Descriptor instead.
func (DemoHealthCheckResponse_ServingStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_health_proto_rawDescGZIP(), []int{1, 0}
}

type DemoHealthCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *DemoHealthCheckRequest) Reset() {
	*x = DemoHealthCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_health_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DemoHealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DemoHealthCheckRequest) ProtoMessage() {}

func (x *DemoHealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_health_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DemoHealthCheckRequest.ProtoReflect.Descriptor instead.
func (*DemoHealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_proto_health_proto_rawDescGZIP(), []int{0}
}

func (x *DemoHealthCheckRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

type DemoHealthCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  DemoHealthCheckResponse_ServingStatus `protobuf:"varint,1,opt,name=status,proto3,enum=grpc.health.v1.DemoHealthCheckResponse_ServingStatus" json:"status,omitempty"`
	Version string                                `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DemoHealthCheckResponse) Reset() {
	*x = DemoHealthCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_health_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DemoHealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DemoHealthCheckResponse) ProtoMessage() {}

func (x *DemoHealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_health_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DemoHealthCheckResponse.ProtoReflect.Descriptor instead.
func (*DemoHealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_proto_health_proto_rawDescGZIP(), []int{1}
}

func (x *DemoHealthCheckResponse) GetStatus() DemoHealthCheckResponse_ServingStatus {
	if x != nil {
		return x.Status
	}
	return DemoHealthCheckResponse_UNKNOWN
}

func (x *DemoHealthCheckResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

var File_proto_health_proto protoreflect.FileDescriptor

var file_proto_health_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x32, 0x0a, 0x16, 0x44, 0x65, 0x6d, 0x6f, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0xd3, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6d, 0x6f, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6d, 0x6f, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4f, 0x0a, 0x0d, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x32, 0xd8, 0x01, 0x0a,
	0x0a, 0x44, 0x65, 0x6d, 0x6f, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x6e, 0x0a, 0x05, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x12, 0x26, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6d, 0x6f, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6d, 0x6f, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f,
	0x67, 0x72, 0x70, 0x63, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x5a, 0x0a, 0x05, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x26, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6d, 0x6f, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6d, 0x6f, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x2f, 0x70, 0x62, 0x5f,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_health_proto_rawDescOnce sync.Once
	file_proto_health_proto_rawDescData = file_proto_health_proto_rawDesc
)

func file_proto_health_proto_rawDescGZIP() []byte {
	file_proto_health_proto_rawDescOnce.Do(func() {
		file_proto_health_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_health_proto_rawDescData)
	})
	return file_proto_health_proto_rawDescData
}

var file_proto_health_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_health_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_proto_health_proto_goTypes = []interface{}{
	(DemoHealthCheckResponse_ServingStatus)(0), // 0: grpc.health.v1.DemoHealthCheckResponse.ServingStatus
	(*DemoHealthCheckRequest)(nil),             // 1: grpc.health.v1.DemoHealthCheckRequest
	(*DemoHealthCheckResponse)(nil),            // 2: grpc.health.v1.DemoHealthCheckResponse
}
var file_proto_health_proto_depIdxs = []int32{
	0, // 0: grpc.health.v1.DemoHealthCheckResponse.status:type_name -> grpc.health.v1.DemoHealthCheckResponse.ServingStatus
	1, // 1: grpc.health.v1.DemoHealth.Check:input_type -> grpc.health.v1.DemoHealthCheckRequest
	1, // 2: grpc.health.v1.DemoHealth.Watch:input_type -> grpc.health.v1.DemoHealthCheckRequest
	2, // 3: grpc.health.v1.DemoHealth.Check:output_type -> grpc.health.v1.DemoHealthCheckResponse
	2, // 4: grpc.health.v1.DemoHealth.Watch:output_type -> grpc.health.v1.DemoHealthCheckResponse
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_proto_health_proto_init() }
func file_proto_health_proto_init() {
	if File_proto_health_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_health_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DemoHealthCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_health_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DemoHealthCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_health_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_health_proto_goTypes,
		DependencyIndexes: file_proto_health_proto_depIdxs,
		EnumInfos:         file_proto_health_proto_enumTypes,
		MessageInfos:      file_proto_health_proto_msgTypes,
	}.Build()
	File_proto_health_proto = out.File
	file_proto_health_proto_rawDesc = nil
	file_proto_health_proto_goTypes = nil
	file_proto_health_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DemoHealthClient is the client API for DemoHealth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DemoHealthClient interface {
	// If the requested service is unknown, the call will fail with status
	// NOT_FOUND.
	Check(ctx context.Context, in *DemoHealthCheckRequest, opts ...grpc.CallOption) (*DemoHealthCheckResponse, error)
	Watch(ctx context.Context, in *DemoHealthCheckRequest, opts ...grpc.CallOption) (DemoHealth_WatchClient, error)
}

type demoHealthClient struct {
	cc grpc.ClientConnInterface
}

func NewDemoHealthClient(cc grpc.ClientConnInterface) DemoHealthClient {
	return &demoHealthClient{cc}
}

func (c *demoHealthClient) Check(ctx context.Context, in *DemoHealthCheckRequest, opts ...grpc.CallOption) (*DemoHealthCheckResponse, error) {
	out := new(DemoHealthCheckResponse)
	err := c.cc.Invoke(ctx, "/grpc.health.v1.DemoHealth/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoHealthClient) Watch(ctx context.Context, in *DemoHealthCheckRequest, opts ...grpc.CallOption) (DemoHealth_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DemoHealth_serviceDesc.Streams[0], "/grpc.health.v1.DemoHealth/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &demoHealthWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DemoHealth_WatchClient interface {
	Recv() (*DemoHealthCheckResponse, error)
	grpc.ClientStream
}

type demoHealthWatchClient struct {
	grpc.ClientStream
}

func (x *demoHealthWatchClient) Recv() (*DemoHealthCheckResponse, error) {
	m := new(DemoHealthCheckResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DemoHealthServer is the server API for DemoHealth service.
type DemoHealthServer interface {
	// If the requested service is unknown, the call will fail with status
	// NOT_FOUND.
	Check(context.Context, *DemoHealthCheckRequest) (*DemoHealthCheckResponse, error)
	Watch(*DemoHealthCheckRequest, DemoHealth_WatchServer) error
}

// UnimplementedDemoHealthServer can be embedded to have forward compatible implementations.
type UnimplementedDemoHealthServer struct {
}

func (*UnimplementedDemoHealthServer) Check(context.Context, *DemoHealthCheckRequest) (*DemoHealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (*UnimplementedDemoHealthServer) Watch(*DemoHealthCheckRequest, DemoHealth_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}

func RegisterDemoHealthServer(s *grpc.Server, srv DemoHealthServer) {
	s.RegisterService(&_DemoHealth_serviceDesc, srv)
}

func _DemoHealth_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemoHealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoHealthServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.health.v1.DemoHealth/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoHealthServer).Check(ctx, req.(*DemoHealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DemoHealth_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DemoHealthCheckRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DemoHealthServer).Watch(m, &demoHealthWatchServer{stream})
}

type DemoHealth_WatchServer interface {
	Send(*DemoHealthCheckResponse) error
	grpc.ServerStream
}

type demoHealthWatchServer struct {
	grpc.ServerStream
}

func (x *demoHealthWatchServer) Send(m *DemoHealthCheckResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _DemoHealth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.health.v1.DemoHealth",
	HandlerType: (*DemoHealthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _DemoHealth_Check_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _DemoHealth_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/health.proto",
}
